# -*- coding: utf-8 -*-
"""CMPUT 656 Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vr_UTX1F_9na18-Kf7ivpU4_Iu_YEXsM
"""

!pip install sentencepiece

import numpy as np 
import pandas as pd
import os
import numpy as np
from keras.callbacks import Callback
from sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score
from sklearn.utils import shuffle

from google.colab import files
src = list(files.upload().values())[0]
open('tokenization.py','wb').write(src)
import tokenization

import tensorflow as tf
import tensorflow_hub as hub
from tensorflow.keras.utils import to_categorical
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

train_data = pd.read_csv('Processed_Input.tsv', encoding='utf-8', sep = '\t')

train_data.fillna("", inplace = True)

train_data = shuffle(train_data)

# Now read the rows, convert them into strings and then only keep the unique ones.
# sentences_and_lables = np.array(sorted([[' '.join(map(str, row[:-1].tolist())).strip(), row[-1]] for row in train_data.iloc[:,:].values]))
sentences_and_lables = np.array([[' '.join(map(str, row[:-1].tolist())).strip(), row[-1]] for row in train_data.iloc[:,:].values])
print(sentences_and_lables.shape)
sentences = sentences_and_lables[:, 0]
labels = sentences_and_lables[:, 1]

label = preprocessing.LabelEncoder()
y = label.fit_transform(labels)
y = to_categorical(y)

print(y[:5])

print(sentences[:5])

m_url = 'https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/2'
# Changing from trainable=True to False.
bert_layer = hub.KerasLayer(m_url, trainable=True)

vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()
do_lower_case = bert_layer.resolved_object.do_lower_case.numpy()
tokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)

def bert_encode(texts, tokenizer, max_len=512):
    all_tokens = []
    all_masks = []
    all_segments = []
    
    for text in texts:
        text = tokenizer.tokenize(text)
        
        text = text[:max_len-2]
        input_sequence = ["[CLS]"] + text + ["[SEP]"]
        pad_len = max_len-len(input_sequence)
        tokens = tokenizer.convert_tokens_to_ids(input_sequence) + [0] * pad_len
        pad_masks = [1] * len(input_sequence) + [0] * pad_len
        segment_ids = [0] * max_len
        
        all_tokens.append(tokens)
        all_masks.append(pad_masks)
        all_segments.append(segment_ids)
        
    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)

def build_model(bert_layer, max_len=512):
    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name="input_word_ids")
    input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name="input_mask")
    segment_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name="segment_ids")
    
    pooled_output, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])
    
    print(tf.shape(sequence_output))
    # SEttign the middle paramter to zero to not include the input mask.
    clf_output = sequence_output[:, :, :]
    print(tf.shape(clf_output))
    
#     lay = tf.keras.layers.Dense(64, activation='relu')(clf_output)
#     lay = tf.keras.layers.Dropout(0.2)(lay)
#     lay = tf.keras.layers.Dense(32, activation='relu')(lay)
#     lay = tf.keras.layers.Dropout(0.2)(lay)
#     out = tf.keras.layers.Dense(2, activation='softmax')(lay)
    
#     clf_output = tf.reshape(clf_output.shape[1],1,)
    # Reducing the filter size to 8 from 32.
    lay = tf.keras.layers.Conv1D(filters=32, kernel_size=5, strides=1, padding="same", activation="relu")(clf_output)
    lay = tf.keras.layers.MaxPooling1D(2, 2)(lay)
    # Changing LSTM units from 60 to 8.
    lay = tf.keras.layers.LSTM(8, return_sequences=True, dropout=0.2)(lay)
    lay = tf.keras.layers.Flatten()(lay)
    out = tf.keras.layers.Dense(6, activation='softmax')(lay)
    
    model = tf.keras.models.Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)
    model.compile(tf.keras.optimizers.Adam(lr=2e-5), loss='categorical_crossentropy', metrics=['accuracy'])

    return model

# changing the max_len from 250 to 300.
max_len = 300
train_input = bert_encode(sentences, tokenizer, max_len=max_len)
train_labels = y

!pip install wandb
!wandb login
import wandb

wandb.init(project="my-test-project", entity="simpleparadox")

from wandb.keras import WandbCallback

wandb.config = {
  "learning_rate": 2e-5,
  "epochs": 1,
  "batch_size": 16,
  "conv_filters":8,
  "lstm_units":8,
  "lstm_dropout":0.2,
}

with tf.device('/device:GPU:0'):
    model = build_model(bert_layer, max_len=max_len)
    model.summary()
    checkpoint = tf.keras.callbacks.ModelCheckpoint('model.h5', monitor='val_accuracy', save_best_only=True, verbose=1)
    earlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=5, verbose=1)
    train_sh = model.fit(
    train_input, train_labels,
    validation_split=0.2,
    epochs=1,
    # callbacks=[checkpoint, earlystopping, WandbCallback()],
    callbacks=[checkpoint, earlystopping],
    batch_size=16,
    verbose=1)

train_sh.history

"""## Obviously, as the number of relations increase, we are expecting the accuracy to drop but not by much.

## Possible question: What's the point of obtaining such a complex model? Is it really worth it for the amount of relations we can extract using a vanilla model?

## Will using negative samples improve the model?

## Use all relations but with less samples. How does the model compare?
"""